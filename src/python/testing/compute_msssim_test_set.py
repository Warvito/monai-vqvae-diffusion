""" Script to compute the MS-SSIM score of the test set.

In order to measure the diversity of the samples generated by the LDM, we use the Multi-Scale Structural Similarity
(MS-SSIM) metric between 1000 images from the test set the MIMIC-CXR dataset in order to have a reference.
"""
import argparse

import numpy as np
import torch
from generative.metrics import MultiScaleSSIMMetric
from monai.config import print_config
from monai.utils import set_determinism
from tqdm import tqdm
from util import get_test_dataloader


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--seed", type=int, default=2, help="Random seed to use.")
    parser.add_argument("--test_ids", help="Location of file with test ids.")
    parser.add_argument("--num_workers", type=int, default=8, help="Number of loader workers")

    args = parser.parse_args()
    return args


def main(args):
    set_determinism(seed=args.seed)
    print_config()

    print("Getting data...")
    test_loader = get_test_dataloader(
        batch_size=1,
        test_ids=args.test_ids,
        num_workers=args.num_workers,
        upper_limit=1000,
    )

    test_loader_2 = get_test_dataloader(
        batch_size=1,
        test_ids=args.test_ids,
        num_workers=args.num_workers,
        upper_limit=1000,
    )

    device = torch.device("cuda")
    ms_ssim = MultiScaleSSIMMetric(spatial_dims=2, data_range=1.0)

    print("Computing MS-SSIM...")
    ms_ssim_list = []
    pbar = tqdm(enumerate(test_loader), total=len(test_loader))
    for step, batch in pbar:
        img = batch["image"]
        for batch2 in test_loader_2:
            img2 = batch2["image"]
            if batch["image_meta_dict"]["filename_or_obj"][0] == batch2["image_meta_dict"]["filename_or_obj"][0]:
                continue
            ms_ssim_list.append(ms_ssim(img.to(device), img2.to(device)).item())
        pbar.update()

    ms_ssim_list = np.array(ms_ssim_list)
    print(f"Mean MS-SSIM: {ms_ssim_list.mean():.6f}")


if __name__ == "__main__":
    args = parse_args()
    main(args)
